#!/bin/bash
#######################################################################################################################
#
# Script to download, install, configure and uninstall raspiBackup.sh
#
# Visit http://www.linux-tips-and-tricks.de/raspiBackup for latest code and other details
#
#######################################################################################################################
#
#    Copyright (C) 2018 framp at linux-tips-and-tricks dot de
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#######################################################################################################################

MYSELF=${0##*/}
MYNAME=${MYSELF%.*}
VERSION="0.4"

MYHOMEDOMAIN="www.linux-tips-and-tricks.de"
MYHOMEURL="https://$MYHOMEDOMAIN"

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

set +u; GIT_DATE="$Date: 2018-07-04 19:52:41 +0200$"; set -u
GIT_DATE_ONLY=${GIT_DATE/: /}
GIT_DATE_ONLY=$(cut -f 2 -d ' ' <<< $GIT_DATE)
GIT_TIME_ONLY=$(cut -f 3 -d ' ' <<< $GIT_DATE)
set +u; GIT_COMMIT="$Sha1: 0cb26d6$"; set -u
GIT_COMMIT_ONLY=$(cut -f 2 -d ' ' <<< $GIT_COMMIT | sed 's/\$//')

GIT_CODEVERSION="$MYSELF $VERSION, $GIT_DATE_ONLY/$GIT_TIME_ONLY - $GIT_COMMIT_ONLY"

FILE_TO_INSTALL="raspiBackup.sh"

RASPIBACKUP_NAME=${FILE_TO_INSTALL%.*}

NL=$'\n'
FILE_TO_INSTALL_BETA="raspiBackup_beta.sh"
declare -A CONFIG_DOWNLOAD_FILE=( ['DE']="raspiBackup_de.conf" ['EN']="raspiBackup_en.conf" )
CONFIG_FILE="raspiBackup.conf"
SAMPLEEXTENSION_TAR_FILE="raspiBackupSampleExtensions.tgz"

read -r -d '' CRON_SAMPLE_CONTENTS <<-'EOF'
#
# Sample crontab entry for raspiBackup.sh
#
# (C) 2017-2018 framp at linux-tips-and-tricks dot de
#
# Create a backup once a week on Sunday morning at 5 am
#
#0 5 * * 0	root	PATH=\"$PATH:/usr/local/bin\"	raspiBackup.sh
EOF

PROPERTY_URL="downloads/raspibackup0613-properties/download"
BETA_CODE_URL="downloads/$FILE_TO_INSTALL_BETA/download"
STABLE_CODE_URL="$FILE_TO_INSTALL"

DOWNLOAD_TIMEOUT=60 # seconds

BIN_DIR="/usr/local/bin"
ETC_DIR="/usr/local/etc"
CRON_DIR="/etc/cron.d"
LOG_FILE="$MYNAME.log"

CONFIG_FILE_ABS_PATH="$ETC_DIR"
CONFIG_FILE_ABS_FILE="$CONFIG_FILE_ABS_PATH/$CONFIG_FILE"
FILE_TO_INSTALL_ABS_PATH="$BIN_DIR"
FILE_TO_INSTALL_ABS_FILE="$FILE_TO_INSTALL_ABS_PATH/$FILE_TO_INSTALL"
CRON_SAMPLE_FILE="$CRON_DIR/$RASPIBACKUP_NAME"

if [ $(id -u) -ne 0 ]; then
  printf "Script must be run as root. Try 'sudo raspi-config'\n"
  exit 1
fi

rm $LOG_FILE

exec 1> >(stdbuf -i0 -o0 -e0 tee -a "$LOG_FILE" >&1)
exec 2> >(stdbuf -i0 -o0 -e0 tee -a "$LOG_FILE" >&2)

function writeToConsole() {
	echo "$@"
}

function downloadCode() {

	local newName

	if [[ -f $FILE_TO_INSTALL_ABS_FILE ]]; then
		oldVersion=$(grep "^VERSION=" $FILE_TO_INSTALL_ABS_FILE | cut -f 2 -d = | sed  "s/\"//g" | sed "s/ .*#.*//")
		newName="$FILE_TO_INSTALL_ABS_FILE.$oldVersion.sh"
		writeToConsole $MSG_SAVING_FILE "$FILE_TO_INSTALL" "$newName"
		mv $FILE_TO_INSTALL_ABS_FILE $newName &>>$LOG_FILE
	elif (( $REFRESH_SCRIPT )); then
		writeToConsole $MSG_NO_INSTALLATION_FOUND
		INSTALLATION_WARNING=1
		return
	fi

	if (( $BETA_INSTALL )); then
		FILE_TO_INSTALL_URL="$BETA_CODE_URL"
		writeToConsole $MSG_DOWNLOADING_BETA "$FILE_TO_INSTALL"
	else
		FILE_TO_INSTALL_URL="$STABLE_CODE_URL"
		writeToConsole $MSG_DOWNLOADING "$FILE_TO_INSTALL"
	fi

	SCRIPT_INSTALLED=1

	httpCode=$(curl -s -o "/tmp/$FILE_TO_INSTALL" -m $DOWNLOAD_TIMEOUT -w %{http_code} -L "$MYHOMEURL/$FILE_TO_INSTALL_URL" 2>>$LOG_FILE)
	if [[ ${httpCode:0:1} != "2" ]]; then
		# writeToConsole $MSG_DOWNLOAD_FAILED "$FILE_TO_INSTALL" "$httpCode"
		unrecoverableError
	fi

	if ! mv "/tmp/$FILE_TO_INSTALL" "$FILE_TO_INSTALL_ABS_FILE" &>>$LOG_FILE; then
		# writeToConsole $MSG_MOVE_FAILED "$FILE_TO_INSTALL_ABS_FILE"
		unrecoverableError
	fi

	# writeToConsole $MSG_CODE_INSTALLED "$FILE_TO_INSTALL_ABS_FILE"

	if ! chmod 755 $FILE_TO_INSTALL_ABS_FILE &>>$LOG_FILE; then
		# writeToConsole $MSG_CHMOD_FAILED "$FILE_TO_INSTALL_ABS_FILE"
		unrecoverableError
	fi

	if [[ "$MYDIR/$MYSELF" != "$FILE_TO_INSTALL_ABS_PATH/$MYSELF" ]]; then
		if ! mv -f "$MYDIR/$MYSELF" "$FILE_TO_INSTALL_ABS_PATH" &>>$LOG_FILE; then
			# writeToConsole $MSG_MOVE_FAILED "$FILE_TO_INSTALL_ABS_PATH/$MYSELF"
			unrecoverableError
		fi
	fi

	# writeToConsole $MSG_CODE_INSTALLED "$FILE_TO_INSTALL_ABS_PATH/$MYSELF"

	if ! chmod 755 $FILE_TO_INSTALL_ABS_PATH/$MYSELF &>>$LOG_FILE; then
		# writeToConsole $MSG_CHMOD_FAILED "$FILE_TO_INSTALL_ABS_PATH/$MYSELF"
		unrecoverableError
	fi

	local chownArgs=$(stat -c "%U:%G" $FILE_TO_INSTALL_ABS_PATH | sed 's/\n//')
	if ! chown $chownArgs $FILE_TO_INSTALL_ABS_PATH/$MYSELF &>>$LOG_FILE; then
		# writeToConsole $MSG_CHOWN_FAILED "$FILE_TO_INSTALL_ABS_PATH/$MYSELF"
		unrecoverableError
	fi

}

function downloadConfig() {

	local newName http_code

	if [[ -f $CONFIG_FILE_ABS_FILE ]]; then
		oldVersion=$(grep "^VERSION=" $FILE_TO_INSTALL_ABS_FILE | cut -f 2 -d = | sed  "s/\"//g" | sed "s/ .*#.*//")
		newName="$CONFIG_FILE_ABS_FILE.$oldVersion"
		# writeToConsole $MSG_SAVING_FILE "$CONFIG_FILE" "$newName"
		[[ "$FILE_TO_INSTALL_ABS_FILE" != "$newName" ]] && mv $CONFIG_FILE $newName &>>$LOG_FILE
	fi

	# writeToConsole $MSG_DOWNLOADING "$CONFIG_FILE"
	CONFIG_INSTALLED=1

	httpCode=$(curl -s -o $CONFIG_FILE_ABS_FILE -m $DOWNLOAD_TIMEOUT -w %{http_code} -L "$MYHOMEURL/$confFile" 2>>$LOG_FILE)
	if [[ ${httpCode:0:1} != "2" ]]; then
		# writeToConsole $MSG_DOWNLOAD_FAILED "$confFile" "$httpCode"
		unrecoverableError
	fi

	if ! chmod 644 $CONFIG_FILE_ABS_FILE &>>$LOG_FILE; then
		# writeToConsole $MSG_CHMOD_FAILED "$CONFIG_FILE_ABS_FILE"
		unrecoverableError
	fi

	# writeToConsole $MSG_CODE_INSTALLED "$CONFIG_FILE_ABS_FILE"

}

function updateConfig() {

	local rc msg

	# writeToConsole $MSG_UPDATING_CONFIG "$CONFIG_FILE_ABS_FILE"

	msg=${MESSAGE_LANGUAGE^^*}
	sed -i "s/^DEFAULT_LANGUAGE=.*\$/DEFAULT_LANGUAGE=\"$msg\"/" $CONFIG_FILE_ABS_FILE

	[[ $CONFIG_BACKUPMODE == "n" ]] && CONFIG_BACKUPMODE=0 || CONFIG_BACKUPMODE=1
	sed -i "s/^DEFAULT_PARTITIONBASED_BACKUP=.*\$/DEFAULT_PARTITIONBASED_BACKUP=\"$CONFIG_BACKUPMODE\"/" $CONFIG_FILE_ABS_FILE
	sed -i "s/^DEFAULT_BACKUPTYPE=.*\$/DEFAULT_BACKUPTYPE=\"$CONFIG_BACKUPTYPE\"/" $CONFIG_FILE_ABS_FILE

	[[ $CONFIG_COMPRESS == "j" ]] && CONFIG_COMPRESS=1 || CONFIG_COMPRESS=0
	sed -i "s/^DEFAULT_ZIP_BACKUP=.*\$/DEFAULT_ZIP_BACKUP=\"$CONFIG_COMPRESS\"/" $CONFIG_FILE_ABS_FILE

	sed -i "s/^DEFAULT_KEEPBACKUPS=.*\$/DEFAULT_KEEPBACKUPS=\"$CONFIG_KEEP_BACKUPS\"/" $CONFIG_FILE_ABS_FILE

	[[ $CONFIG_DETAILED_MESSAGES == "n" ]] && CONFIG_DETAILED_MESSAGES=0 || CONFIG_DETAILED_MESSAGES=1
	sed -i "s/^DEFAULT_MSG_LEVEL=.*$/DEFAULT_MSG_LEVEL=\"$CONFIG_DETAILED_MESSAGES\"/" $CONFIG_FILE_ABS_FILE
}

function createSampleCronfile() {
	# writeToConsole $MSG_INSTALLING_CRON_TEMPLATE "$CRON_SAMPLE_FILE"
	echo "$CRON_SAMPLE_CONTENTS" > "$CRON_SAMPLE_FILE"
}

function uninstall() {

	local pre=${CONFIG_FILE_ABS_FILE%%.*}
	local post=${CONFIG_FILE_ABS_FILE##*.}

	# writeToConsole $MSG_DELETE_FILE "$pre*.$post*"
	if ! rm -f $pre*.$post* &>>$LOG_FILE; then
		# writeToConsole $MSG_UNINSTALL_FAILED "$pre*.$post*"
		unrecoverableError
	fi

	pre=${FILE_TO_INSTALL_ABS_FILE%%.*}
	post=${FILE_TO_INSTALL_ABS_FILE##*.}

	# writeToConsole $MSG_DELETE_FILE "$pre*.$post*"
	if ! rm -f $pre*.$post* 2>>$LOG_FILE; then
		# writeToConsole $MSG_UNINSTALL_FAILED "$pre*.$post*"
		unrecoverableError
	fi

	# writeToConsole $MSG_DELETE_FILE "$FILE_TO_INSTALL_ABS_PATH/$MYSELF"
	if ! rm -f "$FILE_TO_INSTALL_ABS_PATH/$MYSELF" 2>>$LOG_FILE; then
		# writeToConsole $MSG_UNINSTALL_FAILED "$FILE_TO_INSTALL_ABS_PATH/$MYSELF"
		unrecoverableError
	fi

	# writeToConsole $MSG_DELETE_FILE "$CRON_SAMPLE_FILE"
	if ! rm -f "$CRON_SAMPLE_FILE" 2>>$LOG_FILE; then
		# writeToConsole $MSG_UNINSTALL_FAILED "$CRON_SAMPLE_FILE"
		unrecoverableError
	fi

	# writeToConsole $MSG_UNINSTALL_FINISHED "$RASPIBACKUP_NAME"

}

function unrecoverableError() {
    whiptail --msgbox "Unrecoverable error occured. Check logfile $LOG_FILE." 20 60 2
    exit 1
}


calc_wt_size() {
  # NOTE: it's tempting to redirect stderr to /dev/null, so supress error
  # output from tput. However in this case, tput detects neither stdout or
  # stderr is a tty and so only gives default 80, 24 values
  WT_HEIGHT=17
  WT_WIDTH=$(tput cols)

  if [ -z "$WT_WIDTH" ] || [ "$WT_WIDTH" -lt 60 ]; then
    WT_WIDTH=80
  fi
  if [ "$WT_WIDTH" -gt 178 ]; then
    WT_WIDTH=120
  fi
  WT_MENU_HEIGHT=$(($WT_HEIGHT-7))
}

do_about() {
  whiptail --msgbox "\
This tool provides a straight-forward way of doing installation and initial basic configuration of raspiBackup.\
" 20 70 1
}

do_finish() {
  exit 0
}

do_configuration_menu() {
  while :; do
  FUN=$(whiptail --title "raspiBackup Installation and Configuration Tool" --menu "Configuration" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
    "C1 Message language" "Select language for messages" \
    "C2 Message detail" "Enable verbose messages" \
    "C3 Backupmode" "Either normal mode for 2 partitions only or partition oriented mode for more than 2 partitions" \
    "C4 Backuptype" "Linux backup tool used (dd, tar or rsync)" \
    "C5 Compress backups" "tar and dd backups can be compressed" \
    "C6 Number of backups" "Select maximum number of backups to keep" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    return 0
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      C1\ *) do_message_language ;;
      C2\ *) do_message_detail ;;
      C3\ *) do_backupmode ;;
      C4\ *) do_backuptype ;;
      C5\ *) do_compress ;;
      C6\ *) do_keep ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
  fi
  done
}

do_keep() {

  ANSWER=$(whiptail --inputbox "Please enter number of backups to keep." 20 60 "$CONFIG_KEEP_BACKUPS" 3>&1 1>&2 2>&3)
	echo "'$ANSWER'"
  if [ $? -eq 0 ]; then
		if [ "$ANSWER" -lt 0 ] || [ "$ANSWER" -gt 52 ]; then
			whiptail --msgbox "Invalid input '$ANSWER'. Input has to be >= 1 and <= 52." 20 60 2
		else
			CONFIG_KEEP_BACKUPS="$ANSWER"
		fi
  fi
}

do_backuptype() {
  local dd=off
  local tar=off
  local rsync=off

  case "$CONFIG_BACKUPTYPE" in
	dd) dd=on ;;
	tar) tar=on ;;
	rsync) rsync=on ;;
  esac

  ANSWER=$(whiptail --radiolist "Choose backup type" $WT_HEIGHT $WT_WIDTH 3 \
    "dd" "Backup whole disk with dd. Backup can be restored on Windows." "$dd" \
    "tar" "Backup root partition with tar. Make sure backup filesystem can handle files sizes > 4GB." "$tar" \
    "rsync" "Backup whole disk with rsync and use hardlinks if possible." "$rsync" \
    3>&1 1>&2 2>&3)
  if [ $? -eq 0 ]; then
    case "$ANSWER" in
      dd)
		CONFIG_BACKUPTYPE="de"
        ;;
      tar)
		CONFIG_BACKUPTYPE="tar"
        ;;
      rsync)
		CONFIG_BACKUPTYPE="rsync"
        ;;
      *)
        whiptail --msgbox "Programmer error, unrecognised backup type" 20 60 2
        return 1
        ;;
    esac
  fi
}

do_compress() {


  if [ $CONFIG_BACKUPTYPE == "rsync" ]; then
	whiptail --msgbox "rsync backups cannot be compressed" 20 60 2

  else
  local yes=off
  local no=off

  case "$CONFIG_COMPRESS" in
	0) yes=on ;;
	1) no=on ;;
  esac

  ANSWER=$(whiptail --radiolist "Compress backup" $WT_HEIGHT $WT_WIDTH 3 \
    "no" "Don't compress backup." "$dd" \
    "yes" "Compress backup." "$tar" \
    3>&1 1>&2 2>&3)
  if [ $? -eq 0 ]; then
    case "$ANSWER" in
      0)
		CONFIG_COMPRESS=0
        ;;
      1)
		CONFIG_COMPRESS=1
        ;;
      *)
        whiptail --msgbox "Programmer error, unrecognised compress mode" 20 60 2
        return 1
        ;;
    esac
  fi
  fi
}

progressBar() {
  declare todo=("${@}")
  num_todo=${#todo[*]}
  local step=$((100/num_todo))
  local idx=0
  local counter=0
  (
  while :
  do
    cat <<EOF
XXX
$counter
${todo[$idx]}
XXX
EOF
    #local command="${todo[$idx]} &>/dev/null"
    (( $idx < $num_todo )) && ${todo[$idx]} &>>$LOG_FILE
    (( idx+=1 ))
    (( counter+=step ))
    (( $counter > 100 )) && break
    sleep 1
  done
  ) |
  whiptail --title "Please wait..." --gauge "Please wait..." 6 70 0
}

do_uninstall() {
	progressBar uninstall
}

do_install() {

	INSTALLATION_STARTED=1
	progressBar downloadCode downloadConfig updateConfig createSampleCronfile
	INSTALLATION_SUCCESSFULL=1

}


do_backupmode() {
  local normal_mode=off
  local partition_mode=off

  case "$CONFIG_BACKUPMODE" in
	n) normal_mode=on ;;
	p) partition_mode=on ;;
  esac

  ANSWER=$(whiptail --radiolist "Choose backup mode" 20 60 2 \
    "Normal" "Backup 2 partions only" "$normal_mode" \
    "Partition" "Backup more than 2 partitions"  "$partition_mode" \
    3>&1 1>&2 2>&3)
  if [ $? -eq 0 ]; then
    case "$ANSWER" in
      Normal)
        CONFIG_BACKUPMODE="n"
        ;;
      Partition)
        CONFIG_BACKUPMODE="p"
        ;;
      *)
        whiptail --msgbox "Programmer error, unrecognised backup mode" 20 60 2
        return 1
        ;;
    esac
  fi
}

do_message_detail() {
  local detailed_msg=off
  local normal_msg=off

  case "$CONFIG_DETAILED_MESSAGES" in
	0) detailed_msg=on ;;
	1) normal_msg=on ;;
  esac

  ANSWER=$(whiptail --radiolist "Choose message verbosity" 20 60 2 \
    "Normal" "Display important messages only" "$normal_msg" \
    "Verbose" "Display all messages"  "$detailed_msg" \
    3>&1 1>&2 2>&3)
  if [ $? -eq 0 ]; then
    case "$ANSWER" in
      Normal)
        CONFIG_DETAILED_MESSAGES=0
        ;;
      Verbose)
        CONFIG_DETAILED_MESSAGES=1
        ;;
      *)
        whiptail --msgbox "Programmer error, unrecognised message level" 20 60 2
        return 1
        ;;
    esac
  fi
}

do_message_language() {
  local en_msg=off
  local de_msg=off

  case "$MESSAGE_LANGUAGE" in
	de) de_msg=on ;;
	en) en_msg=on ;;
  esac

  ANSWER=$(whiptail --radiolist "Choose language" 20 60 2 \
    "EN" "English" "$en_msg" \
    "DE" "German"  "$de_msg" \
    3>&1 1>&2 2>&3)
  if [ $? -eq 0 ]; then
    case "$ANSWER" in
      EN) MESSAGE_LANGUAGE="en"
        ;;
      DE) MESSAGE_LANGUAGE="de"
        ;;
      *)
        whiptail --msgbox "Programmer error, unrecognised language" 20 60 2
        return 1
        ;;
    esac
  fi
}

[ -z ${LANG+x} ] && LANG="en_US.UTF-8"
LANG_EXT=${LANG,,*}
LANG_SYSTEM=${LANG_EXT:0:2}
if [[ $LANG_SYSTEM != "de" && $LANG_SYSTEM != "de" ]]; then
	LANG_SYSTEM="de"
fi

# defaults
MESSAGE_LANGUAGE="$LANG_SYSTEM"
CONFIG_DETAILED_MESSAGES=1
CONFIG_BACKUPMODE="n"
CONFIG_BACKUPTYPE="rsync"
CONFIG_COMPRESS=0
CONFIG_KEEP_BACKUPS=3
BETA_INSTALL=0
REFRESH_SCRIPT=0

#
# Interactive use loop
#
calc_wt_size
while true; do
  FUN=$(whiptail --title "raspiBackup Installation and Configuration Tool $VERSION" --menu "Setup Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Finish --ok-button Select \
    "1 Configuration" "Configure most common settings" \
    "2 Install" "Install raspiBackup and use configured settings" \
    "3 Sample extensions" "Install and activate sample extensions" \
    "4 Uninstall" "Delete all files installed with raspiBackup" \
    "9 About" "Information about this installation tool" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    do_finish
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      1\ *) do_configuration_menu ;;
      2\ *) do_install ;;
      3\ *) do_sampleextension ;;
      4\ *) do_uninstall ;;
      9\ *) do_about ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
  else
    exit 1
  fi
done
